    private IExpression parseExpression(Operators statementEnd) {
        Token current = this.tokens.get(currentToken);
        IExpression left = null;
        IExpression right = null;
        Operators operator = Operators.PLU;
        Operators prefix = Operators.PLU;
        
        
        //Prefix operators
        //Creating new expression with operator the prefix operator and operand the current one
        if (isOperator(current)) {
            prefix = ((OperatorToken)current).value();
            currentToken += 1;
            current = this.tokens.get(currentToken);
        }
        if (isVar(current)) {
            String varName = (String)current.value();
            if (Program.Get().variableExists(varName)) {
                left = new Expression(prefix, new Variable(varName));
                currentToken += 1;
            } else {
                throw new RuntimeException("The variable " + varName + "is not declared.");
            }
        } else if (isNumber(current)) {
            left = new Expression(prefix, new NumberValue(((NumberToken)current).value()));
            currentToken += 1;
        } else if (isBoolean(current)) {
            if (prefix.equals(Operators.PLU)) {
                left = new BooleanValue(((BooleanToken)current).value());
            } else {
                left = new Expression(prefix, new BooleanValue(((BooleanToken)current).value()));
            }
            currentToken += 1;
        }
        
        if (this.isOperator(this.tokens.get(currentToken))) {
            OperatorToken oper = (OperatorToken)this.tokens.get(currentToken);
            if (!oper.value().equals(statementEnd)) {
                operator = oper.value();
                currentToken += 1;
                right = parseExpression(statementEnd);
            } else {
                right = null;
            }            
        }
                
        
        if (right != null) {
            return new Expression(operator, left, right);
        }
        return new Expression(operator, left);
    }
